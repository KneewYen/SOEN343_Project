package org.ridewithus.domain.entity;

import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.*;
import lombok.*;

@Getter
@Setter
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "stations")
public class Station {

    @Id //primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) //value is generated by Database, not through constructors
    private Long id;

    private Double latitude;

    private Double longitude;

    private String address;

    private String name;

    private int count;

    @Enumerated(EnumType.STRING)
    private StationStatus status;

    private int capacity;

    public enum StationStatus{
        ACTIVE,
        OUT_OF_SERVICE
    }

    // cascade: if you save a station, you save all docks and bikes related to it (same with delete...)
    @OneToMany(mappedBy = "station", cascade = CascadeType.ALL)
    private List<Dock> docks;

    public Station(Double latitude, Double longitude, String address, String name, StationStatus status, int capacity) {
        this.latitude = latitude;
        this.longitude = longitude;
        this.address = address;
        this.name = name;
        this.status = status;
        this.capacity = capacity;
    }

    public boolean hasActiveReservation(){
        return docks.stream().anyMatch(Dock::hasActiveReservation);
    }
}
