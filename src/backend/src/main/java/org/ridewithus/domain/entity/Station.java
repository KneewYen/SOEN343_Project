package org.ridewithus.domain.entity;

import jakarta.persistence.*;

import java.util.List;

@Entity
@Table(name = "stations")
public class Station {
    @Id //primary key 
    @GeneratedValue(strategy = GenerationType.IDENTITY) //value is generated by Database, not through constructors
    private Long id;
    private Long latitude;
    private Long longitude;
    private String address;
    private String name;

    public enum StationStatus{
        ACTIVE,
        OUT_OF_SERVICE
    }

    private StationStatus status;
    private int capacity;

    @OneToMany(mappedBy = "station", cascade = CascadeType.ALL)
    private List<Dock> docks;

    // Constructors
    public Station() {
    }

    public Station(Long latitude, Long longitude, String address, String name, StationStatus status, int capacity) {
        this.latitude = latitude;
        this.longitude = longitude;
        this.address = address;
        this.name = name;
        this.status = status;
        this.capacity = capacity;
    }

    // Getters
    public Long getId() {
        return id;
    }
    public Long getLatitude() {
        return latitude;
    }
    public Long getLongitude() {
        return longitude;
    }
    public String getAddress() {
        return address;
    }
    public String getName() {
        return name;
    }
    public StationStatus getStatus() {
        return status;
    }
    public int getCapacity() {
        return capacity;
    }
    public List<Dock> getDocks() {return docks;}

    // Setters
    public void setId(Long id) {
        this.id = id;
    }
    public void setLatitude(Long latitude) {
        this.latitude = latitude;
    }
    public void setLongitude(Long longitude) {
        this.longitude = longitude;
    }
    public void setAddress(String address) {
        this.address = address;
    }
    public void setName(String name) {
        this.name = name;
    }
    public void setStatus(StationStatus status) {
        this.status = status;
    }
    public void setCapacity(int capacity) {
        this.capacity = capacity;
    }
    public void setDocks(List<Dock> docks) {this.docks = docks;}

    public boolean hasActiveReservation(){
        return docks.stream().anyMatch(Dock::hasActiveReservation);
    }
}
