package org.ridewithus.domain.entity;

import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.*;

import java.util.List;

@Entity
@Table(name = "stations")
public class Station {
    @Id //primary key 
    @GeneratedValue(strategy = GenerationType.IDENTITY) //value is generated by Database, not through constructors
    private Long id;
    private Double latitude;
    private Double longitude;
    private String address;
    private String name;

    public enum StationStatus{
        ACTIVE,
        OUT_OF_SERVICE,

    }
    @Enumerated(EnumType.STRING)
    private StationStatus status;
    private int capacity;

    // cascade: if you save a station, you save all docks and bikes related to it (same with delete...)
    @OneToMany(mappedBy = "station", cascade = CascadeType.ALL) 
    private List<Dock> docks;


    // Constructors
    public Station() {
    }

    public Station(Double latitude, Double longitude, String address, String name, StationStatus status, int capacity) {
        this.latitude = latitude;
        this.longitude = longitude;
        this.address = address;
        this.name = name;
        this.status = status;
        this.capacity = capacity;
    }

    // Getters
    public Long getId() {
        return id;
    }
    public Double getLatitude() {
        return latitude;
    }
    public Double getLongitude() {
        return longitude;
    }
    public String getAddress() {
        return address;
    }
    public String getName() {
        return name;
    }
    public StationStatus getStatus() {
        return status;
    }
    public int getCapacity() {
        return capacity;
    }
    public List<Dock> getDocks() {return docks;}

    // Setters
    public void setId(Long id) {
        this.id = id;
    }
    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }
    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }
    public void setAddress(String address) {
        this.address = address;
    }
    public void setName(String name) {
        this.name = name;
    }
    public void setStatus(StationStatus status) {
        this.status = status;
    }
    public void setCapacity(int capacity) {
        this.capacity = capacity;
    }
    public void setDocks(List<Dock> docks) {this.docks = docks;}

    public boolean hasActiveReservation(){
        return docks.stream().anyMatch(Dock::hasActiveReservation);
    }
}
